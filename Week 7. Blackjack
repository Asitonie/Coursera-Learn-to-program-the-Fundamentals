# Mini-project #6 - Blackjack

import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
score = 0
# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
class Hand:
    def __init__(self):
        # create Hand object
        self.card =[]
        
    def __str__(self):
        # return a string representation of a hand
        hand_str="Hand contains "
        for i in range(len(self.card)):
            hand_str += str(self.card[i]) + ' '

        return hand_str
        
    def add_card(self, card):
        # add a card object to a hand
        return self.card.append(card)

    def get_value(self):
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
        # compute the value of the hand, see Blackjack video
        global VALUES
        card_value = 0
        rank_list = []
        for i in range(len(self.card)):
            rank = self.card[i].get_rank()
            rank_list.append(self.card[i].get_rank())
            if rank ==  'A':
                card_value += 1
            else: 
                card_value += VALUES[rank]
        if ('A' in rank_list) and ((card_value + 10) <= 21):
            card_value += 10
                
        return card_value
                    
   
    def draw(self, canvas, pos):
        # draw a hand on the canvas, use the draw method for cards
        for i in range(len(self.card)):
            self.card[i].draw(canvas,(pos[0] + i * CARD_SIZE[0],pos[1]))
 
        
# define deck class 
class Deck:
    def __init__(self):
        self.deck = []
        for i in SUITS:
            for n in RANKS:
                 self.deck.append(Card(i,n))       

    def shuffle(self):
        # shuffle the deck 
        return random.shuffle(self.deck)

    def deal_card(self):
        return self.deck.pop()
    
    def __str__(self):
        # return a string representing the deck
        deck_str = 'Deck contains '
        for i in range(len(self.deck)):
            deck_str += str(self.deck[i]) + ' '
        return deck_str

#define event handlers for buttons
def deal():
    global outcome, in_play, deck
    global player_hand, dealer_hand,score
    if in_play == True:
        outcome =  "Player press Deal while in play. Dealer wins."
        score -= 1
        in_play = False
    elif in_play == False:
        deck = Deck()
        player_hand = Hand()
        dealer_hand = Hand()
        deck.shuffle()
        player_hand.add_card(deck.deal_card())
        player_hand.add_card(deck.deal_card())
        dealer_hand.add_card(deck.deal_card())
        dealer_hand.add_card(deck.deal_card())
        in_play = True
        outcome = ' '
    
def hit():
    global player_hand,deck,score,outcome,in_play
    # if the hand is in play, hit the player
    if in_play:
        player_hand.add_card(deck.deal_card())
        if player_hand.get_value()  > 21:       
            outcome =  "Player have busted. Dealer wins."
            score -=1
            in_play = False
    # if busted, assign a message to outcome, update in_play and score

          
def stand():
    global player_hand,dealer_hand,outcome,score,in_play
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more
    if  player_hand.get_value() > 21 :
        outcome =  "player have already busted."
    else:
        while dealer_hand.get_value() < 17:
            dealer_hand.add_card(deck.deal_card())
        if dealer_hand.get_value() > 21:
            outcome =  "Dealer have busted. Player wins."
            score+=1
            in_play = False
        elif player_hand.get_value() <= dealer_hand.get_value():
            outcome =  "Dealer wins."
            score -= 1
            in_play = False
        else:
            outcome =  "Player wins."
            score += 1
            in_play = False
   
    
    # assign a message to outcome, update in_play and score

# draw handler    
def draw(canvas):
    # test to make sure that card.draw works, replace with your code below
    global outcome,message,dealer_hand,player_hand,score,in_play
    if outcome !='':
        canvas.draw_text(outcome,(75,125),20,"Black")
    
    canvas.draw_text("Blackjack",(230,30),30,"Black")
    canvas.draw_text("Score:"+str(score),(20,20),20,"Black")
    canvas.draw_text("Player",(40,430),25,"Black")
    canvas.draw_text("Dealer",(40,190),25,"Black")
    player_hand.draw(canvas,(20,450))
    dealer_hand.draw(canvas,(20,200))
    if in_play == True:
        canvas.draw_text("Hit or stand?",(200,430),25,"Black")
        canvas.draw_image(card_back,CARD_BACK_CENTER,CARD_BACK_SIZE,
        [20+CARD_BACK_CENTER[0],200+CARD_BACK_CENTER[1]],CARD_BACK_SIZE)
    elif in_play == False:
        canvas.draw_text("New deal?",(200,430),25,"Black")
# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)


# get things rolling
deal()
frame.start()


# remember to review the gradic rubric
