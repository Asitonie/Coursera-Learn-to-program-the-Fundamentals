# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
ball_pos = [300,200]
ball_vel = [4,4]
direction = RIGHT
# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel# these are vectors stored as lists
    ball_pos=[300,200]
    if direction == RIGHT :
        ball_vel[0]=random.randrange(4, 8)
        ball_vel[1]+random.randrange(2, 6)
    elif direction == LEFT:
        ball_vel[0]=-random.randrange(4, 6)
        ball_vel[1]+random.randrange(2, 6)
# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2,direction,HEIGHT,PAD_WIDTH # these are ints
    paddle1_pos = HEIGHT/2
    paddle2_pos = HEIGHT/2
    score1 = 0
    score2 = 0
    paddle1_vel = 0
    paddle2_vel = 0
    spawn_ball(direction)
def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel,BALL_RADIUS
    global HEIGHT,HALF_PAD_HEIGHT,WIDTH,direction,PAD_WIDTH,paddle1_vel,paddle2_vel
    # tests whether the ball touches/collides with the left and right gutters.
    if (ball_pos[0]- BALL_RADIUS)<PAD_WIDTH and ((ball_pos[1]> (paddle1_pos + HALF_PAD_HEIGHT))  or (ball_pos[1] < (paddle1_pos - HALF_PAD_HEIGHT))):
        score2 += 1
        spawn_ball(RIGHT)
    elif (ball_pos[0]+ BALL_RADIUS) > WIDTH- PAD_WIDTH and ((ball_pos[1]> (paddle2_pos + HALF_PAD_HEIGHT)) or (ball_pos[1] < (paddle2_pos - HALF_PAD_HEIGHT))):
        score1 += 1
        spawn_ball(LEFT)
        
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # update ball
    if (ball_pos[1]+BALL_RADIUS > HEIGHT) or ((ball_pos[1]-BALL_RADIUS) < 0 ) :
        ball_vel[1] = -ball_vel[1]
    # determine whether paddle and ball collide 
    elif (ball_pos[0] - BALL_RADIUS < PAD_WIDTH) and (paddle1_pos-HALF_PAD_HEIGHT < ball_pos[1] <paddle1_pos+HALF_PAD_HEIGHT):
        ball_vel[0] = -(1.1*ball_vel[0])
    elif (ball_pos[0] + BALL_RADIUS > WIDTH-PAD_WIDTH) and (paddle2_pos-HALF_PAD_HEIGHT < ball_pos[1] <paddle2_pos+HALF_PAD_HEIGHT):
        ball_vel[0] = -(1.1*ball_vel[0])
    ball_pos[0]+=ball_vel[0]
    ball_pos[1]+=ball_vel[1]
    # draw ball
    canvas.draw_circle([ball_pos[0],ball_pos[1]],BALL_RADIUS,1,'White','White')
    # update paddle's vertical position, keep paddle on the screen
    if ((paddle1_pos+HALF_PAD_HEIGHT+paddle1_vel) < HEIGHT) and ((paddle1_pos-HALF_PAD_HEIGHT+paddle1_vel)>0): 
        paddle1_pos += paddle1_vel
    if((paddle2_pos+HALF_PAD_HEIGHT+paddle2_vel) < HEIGHT) and ((paddle2_pos-HALF_PAD_HEIGHT+paddle2_vel)>0): 
        paddle2_pos += paddle2_vel
    # draw paddles
    canvas.draw_polygon([[PAD_WIDTH,paddle1_pos+HALF_PAD_HEIGHT],[0,paddle1_pos+HALF_PAD_HEIGHT],[0,paddle1_pos-HALF_PAD_HEIGHT],[PAD_WIDTH,paddle1_pos-HALF_PAD_HEIGHT]],1,"White","White")
    canvas.draw_polygon([[WIDTH - PAD_WIDTH,paddle2_pos + HALF_PAD_HEIGHT],[WIDTH, paddle2_pos + HALF_PAD_HEIGHT],[WIDTH,paddle2_pos-HALF_PAD_HEIGHT],[WIDTH-PAD_WIDTH,paddle2_pos-HALF_PAD_HEIGHT]],1,"White","White")  
    
    # draw scores
    canvas.draw_text(str(score1), (150, 20), 25, 'White')
    canvas.draw_text(str(score2), (450, 20), 25, 'White')
def keydown(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP['w']:
           paddle1_vel = -5
    elif key ==simplegui.KEY_MAP['s']:
           paddle1_vel = 5
    elif key ==simplegui.KEY_MAP['up']: 
           paddle2_vel = -5
    elif key ==simplegui.KEY_MAP['down']:
           paddle2_vel = 5
def keyup(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP['w']:
           paddle1_vel = 0 
    elif key ==simplegui.KEY_MAP['s']:
           paddle1_vel = 0
    elif key ==simplegui.KEY_MAP['up']: 
           paddle2_vel = 0
    elif key ==simplegui.KEY_MAP['down']:
           paddle2_vel = 0

# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.add_button("Reset",new_game)

# start frame
new_game()
frame.start()
